

1. Docker  解决痛点  ---是一种 Linux容器的封装/解决方案，提供简单易用的接口；

	1. 1 环境配置 难题

	eg:    举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。

	    如果老旧的模块与当前环境不兼容，那就麻烦了。开发者会说："它在我的机器可以跑了"（It works on my machine），言下之意，其他 机器 很可能 跑不了。

	1. 2  根本解决办法 ： 软件 可以 带环境安装？也就是说，安装的 软件 时候，把 原始环境 一模一样地 复制 过来。
	1. 3  虚拟机（virtual machine）就是 带环境 安装的一种解决方案
 		1.3.1  资源占用多  ，冗余步骤多 ， 启动慢 （三 缺点 ）

	1.3.2  Linux 容器 
			Linux 容器 不是 模拟 一个完整的操作系统，而是对 进程 进行 隔离。或者说，在正常 进程的 外面 套了一个保护层。对于容器里面的进程来说，
		它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。
		由于容器是进程级别的，相比 虚拟机 有很多 优势。 1.3.2.1 =启动快，占用资源少（很多资源可以共享），体积（内存）小
	
	1.3.4 Docker 将应用程序与该程序的依赖，打包 在一个文件 里面。运行这个文件，就会生成一个虚拟容器。
			程序在这个 虚拟容器里 运行，就好像在 真实的 物理机 上运行一样。

	2 .用途：

	的主要用途，目前有三大类。

	（1）提供一次性的环境。 比如，本地 测试 他人的 软件、持续 集成 的时候 提供 单元测试 和 构建的 环境。

	（2）提供弹性的云服务。 因为 Docker 容器可以随开随关，很适合  动态 扩容 和 缩容。

	（3）组建微服务架构。 通过多个容器，一台机器可以跑 多个服务，因此在 本机 就可以 模拟出  微服务架构。