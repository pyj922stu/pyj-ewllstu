　	
有三套相互独立的生命周期，各个构建环节执行顺序不能打乱，必须按照既定的正确顺序来执行。

	①、Clean Lifecycle:在进行真正的构建之前进行一些清理工作

　　　　②、Default Lifecycle：构建的核心部分，编译、测试、打包、安装、部署等等。

　　　　③、Site Lifecycle：生成项目报告，站点，发布站点。



-------------------------------
maven clean
  maven clean是maven的一个清洁生命周期，目的是删除build目录下的构建输出，体现在文件系统上是删除了Target目录所有文件，
		包括该目录！（也可以说是删除了maven install后的所有内容）。


Default Lifecycle：构建的核心部分，编译、测试、打包、安装、部署等等
		复制代码
validate 
	generate-sources 
	process-sources 
	generate-resources 
	process-resources 复制并处理资源文件，至目标目录，准备打包。 

compile 编译项目的源代码。
 
	process-classes 
	generate-test-sources 
	process-test-sources 
	generate-test-resources 
	process-test-resources 复制并处理资源文件，至目标测试目录。 

test-compile 编译测试源代码。 

	process-test-classes 
	test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。 
	prepare-package 

package 接受编译好的代码，打包成可发布的格式，如 JAR 。
 
	pre-integration-test 
	integration-test 
	post-integration-test 
	verify 

install 将包安装至本地仓库，以让其它项目依赖。 

   重：
	install	上传到本地仓库
	deploy	上传到远程仓库

----------------------------------------------------------------------------
强调一下：在maven中，只要在 同一个生命周期，你执行 后面的阶段，那么 前面的阶段 也会 被执行，而且 不需要 额外 去输入 前面的阶段。
	mvn 的各个 生命周期 步骤都是 依赖插件 来完成的，后面我们会详细讲解 maven 插件。


4、Site Lifecycle：生成项目报告，站点，发布站点。

	pre-site 执行一些需要在生成站点文档之前完成的工作
	site 生成项目的站点文档
	post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
site-deploy 将生成的站点文档部署到特定的服务器上

---------------------------------------------------------------------------
1.maven clean。

	清理项目的target目录

2.maven compile

	编译项目

3.maven test

	编译项目后，再执行Junit测试方法

4.maven package

	编译项目后，再执行Junit测试方法，再把项目打包到target目录

5.maven install

	编译项目后，再执行Junit测试方法，再把项目打包到target目录，再安装到本地仓库。
6. deploy	上传到远程仓库


