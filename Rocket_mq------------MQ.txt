# RocketMQ接入说明

| 版本号 | 修改人 | 更新日期 | 备注 |
| :-: | :-: | :-: | :-: |
| 0.1 | 周炜 | 2020-03-16 | 初始化 |

## 接入方法

### 1.引用框架

中大项目

```xml
<dependency>
  <groupId>co.faao</groupId>
  <artifactId>speed-starter-hk</artifactId>
  <version>1.0.7-SNAPSHOT</version>
</dependency>
```

### 2.打开组件

在启动类上增加@EwellRocketMQ(sw = "on")，加载RocketMQ组件

```java
@EwellStarter(ConfigSources = ConfigApType.class)
@EwellRocketMQ(sw = "on")
public class MoeProviderApplication {
​    public static void main(String[] args) {
​        SpringApplication.run(MoeProviderApplication.class, args);
​    }
}
```

### 3.添加配置

在application配置文件或配置中心中增加相关配置，如中大开发环境项目如下配置

```properties
#rocketmq配置
rocketmq.name-server=192.168.198.124:32433
rocketmq.producer.group=userdemo-infra-ewell
rocketmq.producer.sendMessageTimeout=300000
userdemo.rocketmq.userManageTopic=userdemo-infra-ewell_user_manage
```

### 4.示例代码

#### 4.1 发送消息

顺序发送消息，需要先向RocketMQ集群管理员申请Topic配置

```java
public class UserDubboServiceImpl implements UserDubboService {
   
   @Autowired
   UserBasicInfoService basicInfoService;
   
   @Autowired
   RocketMQTool rocketMQTool;
   
   @Value("${userdemo.rocketmq.userManageTopic}")
   private String userManageTopic;
   
   @Override
   public MessageResult getUserListAndSendToRocketMQ(MessageHeader header) {
      try {
         //调用具体业务接口
         List<UserReq> userReqList = basicInfoService.getUserList();
         rocketMQTool.syncSendOrderly(userManageTopic, "get",
               EmrCodeUtils.to(new HashMap<>(), ErrorMsgConstant.SUCCESS, userReqList), 		"hashKey");
         //返回正常数据
         return EmrCodeUtils.to(new HashMap<>(), ErrorMsgConstant.SUCCESS);
      } catch (SpeedException e) {
         //返回异常信息
         return EmrCodeUtils.to(e);
      }
   }
}
```

#### 4.2 接收消息

```java
import co.faao.plugin.transmission.response.MessageResult;
import com.alibaba.fastjson.JSON;
import lombok.extern.slf4j.Slf4j;
import org.apache.rocketmq.spring.annotation.RocketMQMessageListener;
import org.apache.rocketmq.spring.core.RocketMQListener;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RocketMQMessageListener(topic = "${userdemo.rocketmq.userManageTopic}", consumerGroup = "user_consumer")
public class UserDataConsumer implements RocketMQListener<MessageResult> {
   @Override
   public void onMessage(MessageResult messageResult) {
      log.info(JSON.toJSONString(messageResult));
   }
}
```
